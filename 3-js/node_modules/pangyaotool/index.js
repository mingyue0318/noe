// 1.邮箱
const isEmail = (s) =>{
    return /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]{2,3}){1,2})$/.test(s)
}
// 2.手机号码 
const isMobile = (s) => {
    return /^1[0-9]{10}$/.test(s)
}
// 3.电话号码
const isPhone = (s) => {
    return /^([0-9]{3,4}-)?[0-9]{7,8}$/.test(s)
}
// 4.是否url地址
const isURL = (s) => {
    return /^http[s]?:\/\/.*/.test(s)
}
// 5.是否字符串

const isString = (o) => {
    return Object.prototype.toString.call(o).slice(8, -1) === 'String'
}

// 6.是否数字

 const isNumber = (o) => {
    return Object.prototype.toString.call(o).slice(8, -1) === 'Number'
}
// 7.是否boolean

 const isBoolean = (o) => {
    return Object.prototype.toString.call(o).slice(8, -1) === 'Boolean'
}
// 8.是否函数

 const isFunction = (o) => {
    return Object.prototype.toString.call(o).slice(8, -1) === 'Function'
}
// 9.是否为null

 const isNull = (o) => {
    return Object.prototype.toString.call(o).slice(8, -1) === 'Null'
}
// 10.是否undefined

 const isUndefined = (o) => {
    return Object.prototype.toString.call(o).slice(8, -1) === 'Undefined'
}
// 11.是否对象

 const isObj = (o) => {
    return Object.prototype.toString.call(o).slice(8, -1) === 'Object'
}
// 12.是否数组

 const isArray = (o) => {
    return Object.prototype.toString.call(o).slice(8, -1) === 'Array'
}
// 13.是否时间

 const isDate = (o) => {
    return Object.prototype.toString.call(o).slice(8, -1) === 'Date'
}
// 14.是否正则

 const isRegExp = (o) => {
    return Object.prototype.toString.call(o).slice(8, -1) === 'RegExp'
}
// 15.是否错误对象

 const isError = (o) => {
    return Object.prototype.toString.call(o).slice(8, -1) === 'Error'
}
// 16.是否Symbol函数

 const isSymbol = (o) => {
    return Object.prototype.toString.call(o).slice(8, -1) === 'Symbol'
}
// 17.是否Promise对象

 const isPromise = (o) => {
    return Object.prototype.toString.call(o).slice(8, -1) === 'Promise'
}
// 18.是否Set对象

 const isSet = (o) => {
    return Object.prototype.toString.call(o).slice(8, -1) === 'Set'
}
 const ua = navigator.userAgent.toLowerCase();
// 19.是否是微信浏览器

 const isWeiXin = () => {
    return ua.match(/microMessenger/i) == 'micromessenger'
}
// 20.是否是移动端

 const isDeviceMobile = () => {
    return /android|webos|iphone|ipod|balckberry/i.test(ua)
}
// 21.是否是QQ浏览器

 const isQQBrowser = () => {
    return !!ua.match(/mqqbrowser|qzone|qqbrowser|qbwebviewtype/i)
}
// 22.是否是爬虫

 const isSpider = () => {
    return /adsbot|googlebot|bingbot|msnbot|yandexbot|baidubot|robot|careerbot|seznambot|bot|baiduspider|jikespider|symantecspider|scannerlwebcrawler|crawler|360spider|sosospider|sogou web sprider|sogou orion spider/.test(ua)
}
// 23.是否ios

 const isIos = () => {
    var u = navigator.userAgent;
    if (u.indexOf('Android') > -1 || u.indexOf('Linux') > -1) {  //安卓手机
        return false
    } else if (u.indexOf('iPhone') > -1) {//苹果手机
        return true
    } else if (u.indexOf('iPad') > -1) {//iPad
        return false
    } else if (u.indexOf('Windows Phone') > -1) {//winphone手机
        return false
    } else {
        return false
    }
}
// 24.是否为PC端

 const isPC = () => {
    var userAgentInfo = navigator.userAgent;
    var Agents = ["Android", "iPhone",
        "SymbianOS", "Windows Phone",
        "iPad", "iPod"];
    var flag = true;
    for (var v = 0; v < Agents.length; v++) {
        if (userAgentInfo.indexOf(Agents[v]) > 0) {
            flag = false;
            break;
        }
    }
    return flag;
}
// 25.去除html标签

 const removeHtmltag = (str) => {
    return str.replace(/<[^>]+>/g, '')
}
// 26.获取url参数

 const getQueryString = (name) => {
    const reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)', 'i');
    const search = window.location.search.split('?')[1] || '';
    const r = search.match(reg) || [];
    return r[2];
}
// 27.动态引入js

 const injectScript = (src) => {
    const s = document.createElement('script');
    s.type = 'text/javascript';
    s.async = true;
    s.src = src;
    const t = document.getElementsByTagName('script')[0];
    t.parentNode.insertBefore(s, t);
}
// 28.根据url地址下载

 const download = (url) => {
    var isChrome = navigator.userAgent.toLowerCase().indexOf('chrome') > -1;
    var isSafari = navigator.userAgent.toLowerCase().indexOf('safari') > -1;
    if (isChrome || isSafari) {
        var link = document.createElement('a');
        link.href = url;
        if (link.download !== undefined) {
            var fileName = url.substring(url.lastIndexOf('/') + 1, url.length);
            link.download = fileName;
        }
        if (document.createEvent) {
            var e = document.createEvent('MouseEvents');
            e.initEvent('click', true, true);
            link.dispatchEvent(e);
            return true;
        }
    }
    if (url.indexOf('?') === -1) {
        url += '?download';
    }
    window.open(url, '_self');
    return true;
}
// 29.el是否包含某个class

 const hasClass = (el, className) => {
    let reg = new RegExp('(^|\\s)' + className + '(\\s|$)')
    return reg.test(el.className)
}
// 30.el添加某个class

 const addClass = (el, className) => {
    if (hasClass(el, className)) {
        return
    }
    let newClass = el.className.split(' ')
    newClass.push(className)
    el.className = newClass.join(' ')
}

module.s = {
    isEmail,
    isMobile
}
